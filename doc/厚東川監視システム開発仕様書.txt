# 厚東川監視システム開発仕様書

## 1. プロジェクト概要

### 1.1 システム名
厚東川リアルタイム監視システム（Kotogawa Real-time Monitoring System）

### 1.2 目的
山口県宇部市の厚東川ダムおよび厚東川（持世寺）の水位・雨量データをリアルタイムで監視し、防災情報として関係者に提供する。

### 1.3 開発方針
- **フレームワーク**: Streamlit
- **ホスティング**: Streamlit Cloud（無料プラン）
- **データ収集**: GitHub Actions
- **データ保存**: GitHubリポジトリ

### 1.4 納期
開発開始から2週間

---

## 2. 機能要件

### 2.1 必須機能

#### 2.1.1 データ収集機能
- 山口県土木防災情報システムからのデータ取得
- 10分間隔での自動収集
- エラー時の再試行機能（最大3回）

#### 2.1.2 データ表示機能
- リアルタイムダッシュボード
- 水位・雨量の時系列グラフ
- 現在値のメトリクス表示
- データテーブル表示

#### 2.1.3 アラート機能
- 水位警戒値超過時の視覚的アラート
- 設定可能な警戒値

#### 2.1.4 データ管理機能
- 過去7日間のデータ保持
- CSVエクスポート機能

### 2.2 オプション機能
- 予測機能（将来実装）
- メール通知（将来実装）

---

## 3. 技術仕様

### 3.1 使用技術
```
フロントエンド:
- Streamlit 1.28.0
- Plotly 5.17.0

バックエンド:
- Python 3.9+
- pandas 2.0.3
- requests 2.31.0
- beautifulsoup4 4.12.2

インフラ:
- GitHub（ソースコード・データ管理）
- GitHub Actions（定期実行）
- Streamlit Cloud（ホスティング）
```

### 3.2 データソース
```
厚東川ダム:
- URL: https://y-bousai.pref.yamaguchi.lg.jp/citizen/dam/kdm_graph.aspx
- パラメータ: stncd=015

厚東川（持世寺）:
- URL: https://y-bousai.pref.yamaguchi.lg.jp/citizen/water/kwl_graph.aspx
- パラメータ: stncd=067
```

### 3.3 データ形式
```json
{
  "timestamp": "2024-01-20T12:00:00",
  "dam": {
    "water_level": 37.8,
    "storage_rate": 97.5,
    "inflow": 2.44,
    "outflow": 6.25,
    "storage_change": -0.5
  },
  "river": {
    "water_level": 4.04,
    "level_change": 0.14,
    "status": "警戒"
  },
  "rainfall": {
    "hourly": 3,
    "cumulative": 239,
    "change": 1
  }
}
```

---

## 4. システム構成

### 4.1 リポジトリ構造
```
kotogawa-monitor-streamlit/
├── streamlit_app.py          # メインアプリケーション
├── requirements.txt          # 依存パッケージ
├── README.md                 # プロジェクト説明
├── .streamlit/
│   └── config.toml          # Streamlit設定
├── data/
│   ├── latest.json          # 最新データ
│   └── history/             # 履歴データ（YYYY/MM/DD/）
├── scripts/
│   ├── collect_data.py      # データ収集スクリプト
│   ├── process_data.py      # データ処理
│   └── cleanup_data.py      # 古いデータ削除
├── .github/
│   └── workflows/
│       ├── data_collection.yml  # 定期データ収集
│       └── cleanup.yml          # 定期クリーンアップ
└── tests/
    ├── test_collector.py
    └── test_app.py
```

### 4.2 データフロー
```mermaid
graph LR
    A[山口県防災システム] -->|スクレイピング| B[GitHub Actions]
    B -->|10分ごと| C[データ収集スクリプト]
    C -->|JSON保存| D[GitHubリポジトリ]
    D -->|読み込み| E[Streamlit App]
    E -->|表示| F[Webブラウザ]
```

---

## 5. 実装詳細

### 5.1 データ収集スクリプト（scripts/collect_data.py）

#### 主要機能
1. **スクレイピング処理**
   - requests + BeautifulSoupを使用
   - タイムアウト設定: 30秒
   - User-Agent設定必須

2. **データ抽出**
   - HTML解析による数値抽出
   - エラーハンドリング
   - データ検証

3. **データ保存**
   - latest.jsonの更新
   - 履歴ファイルの作成
   - 古いファイルの自動削除

#### エラーハンドリング
```python
- ネットワークエラー: 3回まで再試行
- パースエラー: デフォルト値を使用
- 保存エラー: エラーログ出力
```

### 5.2 Streamlitアプリケーション（streamlit_app.py）

#### ページ構成
```python
1. ヘッダー部
   - タイトル
   - 最終更新時刻
   - 更新ボタン

2. アラート部
   - 警戒レベル表示
   - 視覚的警告

3. メトリクス部
   - 4列レイアウト
   - 現在値と変化量

4. グラフ部
   - タブ切り替え
   - 統合グラフ
   - データテーブル

5. サイドバー
   - 設定項目
   - 表示期間選択
   - アラート閾値設定
```

#### 主要関数
```python
@st.cache_data(ttl=300)
def load_latest_data():
    """最新データ読み込み（5分キャッシュ）"""

@st.cache_data(ttl=600)
def load_history_data(hours=24):
    """履歴データ読み込み（10分キャッシュ）"""

def create_time_series_graph(df):
    """時系列グラフ作成"""

def check_alert_conditions(data):
    """アラート条件チェック"""
```

### 5.3 GitHub Actions設定

#### data_collection.yml
```yaml
スケジュール: */10 * * * * (10分ごと)
タイムアウト: 5分
再試行: 自動

処理フロー:
1. リポジトリチェックアウト
2. Python環境セットアップ
3. データ収集実行
4. データコミット・プッシュ
```

#### cleanup.yml
```yaml
スケジュール: 0 0 * * * (毎日0時)
処理: 7日以前のデータ削除
```

---

## 6. UI/UX設計

### 6.1 画面レイアウト
```
┌──────────────────────────────────────┐
│         ヘッダー（タイトル・更新）      │
├──────────────────────────────────────┤
│         アラート表示エリア             │
├──────────────────────────────────────┤
│  ┌─────┐ ┌─────┐ ┌─────┐ ┌─────┐ │
│  │水位  │ │貯水率│ │雨量  │ │累積  │ │
│  └─────┘ └─────┘ └─────┘ └─────┘ │
├──────────────────────────────────────┤
│  タブ［グラフ｜データ｜予測］          │
│  ┌──────────────────────────────┐   │
│  │                              │   │
│  │      メインコンテンツ          │   │
│  │                              │   │
│  └──────────────────────────────┘   │
└──────────────────────────────────────┘

サイドバー:
├─ 自動更新設定
├─ 表示期間
├─ アラート設定
└─ システム情報
```

### 6.2 カラースキーム
```python
- Primary: #1f77b4 (青)
- Warning: #ff9800 (橙)
- Danger: #f44336 (赤)
- Success: #4caf50 (緑)
- Background: #FFFFFF
- Secondary: #F0F2F6
```

---

## 7. デプロイ手順

### 7.1 GitHub準備
1. リポジトリ作成（Public推奨）
2. ソースコードプッシュ
3. GitHub Actions有効化
4. 初回データ収集実行確認

### 7.2 Streamlit Cloud設定
1. https://streamlit.io/cloud アクセス
2. GitHubアカウント連携
3. 新規アプリ作成
   - Repository: kotogawa-monitor-streamlit
   - Branch: main
   - Main file: streamlit_app.py
4. Deploy実行

### 7.3 設定項目
```toml
# Secrets設定（必要に応じて）
[secrets]
github_repo = "username/kotogawa-monitor-streamlit"
alert_email = "admin@example.com"
```

---

## 8. テスト要件

### 8.1 単体テスト
- データ収集機能
- データ解析機能
- アラート判定機能

### 8.2 統合テスト
- エンドツーエンドテスト
- 画面表示確認
- データ更新確認

### 8.3 動作確認項目
```
□ データ収集が10分ごとに実行される
□ 最新データが正しく表示される
□ グラフが適切に描画される
□ アラートが正しく表示される
□ CSVダウンロードが機能する
□ モバイル表示が正常
□ 自動更新が動作する
```

---

## 9. 運用・保守

### 9.1 監視項目
- GitHub Actions実行状況
- Streamlit Cloudステータス
- データ更新頻度
- エラーログ

### 9.2 メンテナンス
- 週次: ログ確認
- 月次: データクリーンアップ確認
- 四半期: パッケージ更新

### 9.3 トラブルシューティング
| 症状 | 原因 | 対処 |
|------|------|------|
| データ未更新 | Actions失敗 | ログ確認・手動実行 |
| アプリエラー | デプロイ失敗 | 再デプロイ |
| 表示崩れ | ブラウザ互換性 | Chrome/Edge推奨 |

---

## 10. 納品物

### 10.1 ソースコード
- GitHubリポジトリ（全ソースコード）
- README.md（使用方法）

### 10.2 ドキュメント
- 本仕様書
- 運用マニュアル
- API仕様書（データ形式）

### 10.3 稼働環境
- Streamlit Cloudで稼働中のアプリケーション
- アクセスURL提供

---

## 11. 制約事項

### 11.1 技術的制約
- Streamlit無料プランの制限
- GitHub Actions実行時間制限（月2000分）
- リポジトリサイズ制限（1GB）

### 11.2 機能制約
- WebSocketリアルタイム通信不可
- カスタムドメイン設定不可（有料）
- 同時接続数制限あり

---

## 12. 今後の拡張案

1. **Phase 2**
   - 予測機能実装
   - メール通知機能
   - 複数地点対応

2. **Phase 3**
   - モバイルアプリ開発
   - API提供
   - 外部システム連携

---

## 改訂履歴

| 版 | 日付 | 内容 | 作成者 |
|----|------|------|--------|
| 1.0 | 2024-01-20 | 初版作成 | - |

---

本仕様書に関する質問は、プロジェクト管理者までお問い合わせください。